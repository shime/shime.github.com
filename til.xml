<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL • Hrvoje Šimić</title>
    <description>A collection of short form articles by Hrvoje Šimić</description>		
    <link>http://shime.sh</link>
    <atom:link href="http://shime.sh/til.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partitioning parallel tests on Heroku CI</title>
      
        <description>
          &lt;p&gt;Running tests in parallel on Heroku CI can greatly reduce
test suite execution time. Spinning up multiple nodes is as simple as changing &lt;code&gt;app.json&lt;/code&gt;
to something like this:&lt;/p&gt;

          <a href="http://shime.sh/til/partitioning-parallel-tests-on-heroku-ci">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/partitioning-parallel-tests-on-heroku-ci</link>
      <guid isPermaLink="true">http://shime.sh/til/partitioning-parallel-tests-on-heroku-ci</guid>
    </item>
    
    <item>
      <title>Building emphasized code blocks in Jekyll</title>
      
        <description>
          &lt;p&gt;Code blocks in these articles support emphasizing specific lines which
helps to direct a reader&amp;#39;s attention.&lt;/p&gt;

          <a href="http://shime.sh/til/building-emphasized-code-blocks-in-jekyll">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/building-emphasized-code-blocks-in-jekyll</link>
      <guid isPermaLink="true">http://shime.sh/til/building-emphasized-code-blocks-in-jekyll</guid>
    </item>
    
    <item>
      <title>Building pagination from scratch</title>
      
        <description>
          &lt;p&gt;Since a lot of my past projects included some sort
of single-page application as the frontend and Rails
as the backend, I wanted to check how hard would it
be to implement pagination without using any gems.&lt;/p&gt;

          <a href="http://shime.sh/til/building-pagination-from-scratch">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/building-pagination-from-scratch</link>
      <guid isPermaLink="true">http://shime.sh/til/building-pagination-from-scratch</guid>
    </item>
    
    <item>
      <title>Stopping the fans with a script</title>
      
        <description>
          &lt;p&gt;I find it irritating when fans on my
laptop start spinning out of control, especially
if it&amp;#39;s caused by something non-critical or 
running in the background.&lt;/p&gt;

          <a href="http://shime.sh/til/stopping-the-fans-with-a-script">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/stopping-the-fans-with-a-script</link>
      <guid isPermaLink="true">http://shime.sh/til/stopping-the-fans-with-a-script</guid>
    </item>
    
    <item>
      <title>Using git stash to test the bug fix</title>
      
        <description>
          &lt;p&gt;Git stash has been a handy command in my 
workflow for checking whether a test covers the bug.&lt;/p&gt;

          <a href="http://shime.sh/til/using-git-stash-to-test-the-bug-fix">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0200</pubDate>
      <link>http://shime.sh/til/using-git-stash-to-test-the-bug-fix</link>
      <guid isPermaLink="true">http://shime.sh/til/using-git-stash-to-test-the-bug-fix</guid>
    </item>
    
    <item>
      <title>Commenting your own pull requests when requesting a review</title>
      
        <description>
          &lt;p&gt;I&amp;#39;ve been practicing reviewing my own
pull requests when I open them for some time
now, but I&amp;#39;ve recently learned a trick for improving
the reviewing process of a pull request.&lt;/p&gt;

          <a href="http://shime.sh/til/commenting-your-own-pull-requests-when-requesting-a-review">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Fri, 03 May 2019 00:00:00 +0200</pubDate>
      <link>http://shime.sh/til/commenting-your-own-pull-requests-when-requesting-a-review</link>
      <guid isPermaLink="true">http://shime.sh/til/commenting-your-own-pull-requests-when-requesting-a-review</guid>
    </item>
    
    <item>
      <title>Filtering records with endless ranges</title>
      
        <description>
          &lt;p&gt;Ruby 2.6 has added support for &lt;a href=&quot;https://ruby-doc.org/core-2.6/Range.html#class-Range-label-Endless+Ranges&quot;&gt;endless ranges&lt;/a&gt;,
which means ranges no longer require the end argument.&lt;/p&gt;

          <a href="http://shime.sh/til/filtering-records-with-endless-ranges">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0200</pubDate>
      <link>http://shime.sh/til/filtering-records-with-endless-ranges</link>
      <guid isPermaLink="true">http://shime.sh/til/filtering-records-with-endless-ranges</guid>
    </item>
    
    <item>
      <title>Shorten Github link from the command line</title>
      
        <description>
          &lt;p&gt;There&amp;#39;s a tool for shortening 
links from Github that I&amp;#39;ve known for a while
but I imagine not everyone is aware of it.&lt;/p&gt;

          <a href="http://shime.sh/til/shorten-github-link-from-the-command-line">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/shorten-github-link-from-the-command-line</link>
      <guid isPermaLink="true">http://shime.sh/til/shorten-github-link-from-the-command-line</guid>
    </item>
    
    <item>
      <title>From class components to function components with hooks</title>
      
        <description>
          &lt;p&gt;I&amp;#39;ve been using React &lt;sup&gt;16.5.2&lt;/sup&gt; context instead of Redux in
the super secret app I&amp;#39;m working on, and I appreciate the simplicity improvement.
The learning curve is pretty minimal, and there are fewer levels of abstraction.
The one thing that was annoying me was the non-optimal ergonomics of the API when consuming the context.&lt;/p&gt;

          <a href="http://shime.sh/til/from-class-components-to-function-components-with-hooks">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/from-class-components-to-function-components-with-hooks</link>
      <guid isPermaLink="true">http://shime.sh/til/from-class-components-to-function-components-with-hooks</guid>
    </item>
    
    <item>
      <title>Refactoring a large case statement</title>
      
        <description>
          &lt;p&gt;I&amp;#39;m currently building a gem for converting
curl commands to something else, and one early
problem I needed to deal with was parsing the 
curl command arguments.&lt;/p&gt;

          <a href="http://shime.sh/til/refactoring-a-large-case-statement">http://shime.sh{ post.url }}</a>
        </description>
      
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0100</pubDate>
      <link>http://shime.sh/til/refactoring-a-large-case-statement</link>
      <guid isPermaLink="true">http://shime.sh/til/refactoring-a-large-case-statement</guid>
    </item>
    
  </channel>
</rss>
